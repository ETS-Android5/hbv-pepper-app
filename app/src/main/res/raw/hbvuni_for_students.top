topic: ~hbvuni_for_students()
# topic für stundenplan, mensaplan, raumfindung

concept:(w-words)[wann wo]

concept:(wo) [wo "wo ist" "wo befindet" "wo finde" "wo findet"]
concept:(wann) [wann "wann ist" "wo ist" "wo finde" "wo findet"]

# ----- ----- ----- L E C T U R E S ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

# -----> Wirtschaftsinformatik
concept:(Programmieren-I) [prog programmieren "prog eins" "prog zwei"]
concept:(Compilerbau) [compilerbau]
concept:(Parallellprogrammierung) [paraprog parallelprogrammierung "parallele Programmierung"]

concept:(Mathematik-I) [Mathe "Mathe [eins 1]" "Mathematik [eins 1]" "diskrete Mathematik"]
concept:(Mathematik-II) ["Mathe [zwei 2]" "Mathematik [zwei 2]"]
concept:(Mathematik-III) ["Mathe [drei 3]" "Mathematik [drei 3]" Stochastik]

concept:(Graphen-und-Endliche-Automaten) [Graphen "Graphen und Gutomaten" "endliche Automaten"]
concept:(Theoretische-Informatik) ["theo inf" "theoretische Informatik"]

concept:(Vernetze-Systeme) ["vernetzte Systeme"]
concept:(Big-Data) ["big data" "big data und analyse{werkzeuge}"]
concept:(Grundlagen-Systemintegration) [systemintegration]
concept:(Datenbanken-I) ["datenbanken eins" db DB]
concept:(Datenbanken-II) ["datenbanken zwei"]

concept:(Software-Engineering) ["swe {[eins 1]}" "software engineering {[eins 1]}" "es we e [eins 1]"]
concept:(Software-Engineering-II) ["swe {[zwei 2]}" "software engineering {[zwei 2]}" "es we e [zwei 2]"]
concept:(Software-Engineering-III) ["swe [drei 3]" "software engineering [drei 3]" "es we e [drei 3]"]

concept:(ERP) [erp "enterprice resource planning"]
concept:(ABAB) [abab]
concept:(BWL) [BWL Betriebswirtschaftslehre]
concept:(Business-Intelligence) [bi biei "business intelligence"]
concept:(Standardsoftware) [standardsoftware]
concept:(Controlling) [controlling]
concept:(IT-Recht) ["it recht" recht]
concept:(IT-Sicherheit) ["it sicherheit"]

concept:(Technikfolgenabschätzen) [tfa Technikfolgenabschätz[en ung]]
concept:(IOT) [iot "ei o ti" "internet of things"]
concept:(KIML) [KI "ka i" "Künstliche intelligenz" "künstliche intelligenz und maschinelles lernen"]
concept:(ROBOPROG) [Roboterprogrammierung]

# ----- -----> Informatik (falls nicht in WINF schon definiert)
concept:(Infrastruktur) [infrastruktur]
concept:(Rechnerarchitektur) ["Rechnerarchitektur {und Betriebssysteme}" Betriebssysteme]
concept:(Qualitätssicherung) [Qualitätssicherung]
concept:(Administration-und-Customizing-ERP) ["Administration {und Customizing {von ["e er p" ERP]}}"]

# ----- ----- ----- C O U R S E S ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
# only bachelor
concept:(WI)[WI Wirtschaftsinformatik]
concept:(INF)[INF Informatik]
concept:(BWL)[BWL Betriebswirtschaftslehre]
concept:(CTM)[CTM "Crouse tourism management"]
#concept:(DIIM)[DIIM ""]
concept:(DMP)[DPM "digitale Medienproduktion"]
concept:(GIF)[GIF ""]
concept:(TWL)[TWL "Technologie und Logistik?"]

concept:(WI-lectures) [
    ~Programmieren-I ~Programmieren-II ~Compilerbau ~Parallellprogrammierung
    ~Theoretische-Informatik ~Graphen-und-Endliche-Automaten ~Mathematik-I ~Mathematik-II ~Mathematik-III
    ~Vernetzte-Systeme ~Big-Data ~Grundlagen-Systemintegration ~Datenbanken-I ~Datenbanken-II
    ~Software-Engineering-I ~Software-Engineering-II ~Software-Engineering-III
    ~ERP ~ABAB ~BWL ~Business-Intelligence ~Standardsoftware ~Controlling ~IT-Recht ~IT-Sicherheit
    ~Technikfolgenabschätzen ~IOT ~KIML ~ROBOPROG
]

concept:(INF-lectures)[
    ~Programmieren-I ~Programmieren-II ~Compilerbau ~Parallellprogrammierung
    ~Mathematik-I ~Mathematik-II ~Mathematik-III
    ~Theoretische-Informatik ~Technikfolgenabschätzen ~Infrastruktur ~Rechnerarchitektur
    ~Qualitätssicherung ~Administration-und-Customizing-ERP ~IOT ~KIML ~ABAB ~ROBOPROG
]

concept:(courses)[~WI ~INF]
concept:(semester)[1 2 3 4 5 6 7 8 eins zwei drei vier fünf sechs sieben acht]


# ----- ----- G E N E R A L ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ---------- ----- ----- -----
u:(test) check
proposal: %init #Möchtest du etwas über den Stundenplan oder das aktuelle Angebot in unserer Mensa wissen? ^enableThenGoto(waswillernun)
u:(irgendwas) %waswillernun
    u1:(stundenplan) ~bestaetigung ...




# ----- ----- A B O U T - T I M E T A B L E ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
u:({so} zeig{e} {er} {mir} {den} Stundenplan {für} {den} Studiengang _~courses {sofort} {bitte})
    $course=$1 $semester=$2 Sofort mein Meister und Gebieter ^execute(VariableExecutor, timetable_course, $course)

u:({so} zeig{e} {er} {mir} {den} Stundenplan {für} {den} Studiengang _~courses {[im "für das"]} semester _~semester {sofort} {bitte})
    $course=$1 $semester=$2 Sofort mein Meister und Gebieter ^execute(VariableExecutor, timetable_course_semester, $course, $semester)

#def:greets($age) ^first["$age > 18 Mister" "kid"]
#u:(I am _* years old) Hello ^greets($1)

#u:(input1) answer
#   u1:(input2) answer
#   u1:(input3) answer
#     u2:(input4) answer
#        u3:(input5) answer
#     u2:(input6) answer

# spezifischer Kurs
u:({~w-words} {"findet der" "ist der"} Kurs $1 {statt})
    $course=$1 $semester=$2 Gib mir einen Moment ^execute(VariableExecutor, timetable_detail, $course, $semester) Der Kurs $course im Semester $semester findet irgendwann statt







# ----- ----- A B O U T - M E N S A ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
u:({was} {gibt{s}} {es} {zu} essen {am} _[Montag Dienstag Mittwoch Donnerstag Freitag Morgen Übermorgen]) $day=$1 ^execute(VariableExecutor, qiVariableMensa, $day) $day gibt es entweder $qiVariableMensa
u:({was} {gibt{s}} {es} {am} _[Montag Dienstag Mittwoch Donnerstag Freitag Morgen Übermorgen] {zu} essen) $day=$1 ^execute(VariableExecutor, qiVariableMensa, $day) $day gibt es entweder $qiVariableMensa

u:({Ich hab{e} hunger} {Zeig {mir} {den} Mensaplan}) ^execute(VariableExecutor, qiVariableMensa, Plan) Hier hast du eine Übersicht über den Mensaplan




# ----- ----- N A V I G A T I O N ----- ----- ----- ----- ----- -----
u:(~zurück) ~bestaetigung ^execute(FragmentExecutor, frag_hbv_uni_main)
u:(~reset) ~bestaetigung ^execute(FragmentExecutor, frag_main)





# ----- ----- E O F ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----